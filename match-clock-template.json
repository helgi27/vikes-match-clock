{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Irdn.is helpers",
  "Parameters": {
    "Domain": {
      "Description": "Domain to host page on",
      "Type": "String",
      "Default": "vikes-match.irdn.is"
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "S3hostedzoneID": "Z3AQBSTGFYJSTF",
        "websiteendpoint": "s3-website-us-east-1.amazonaws.com"
      },
      "us-west-1": {
        "S3hostedzoneID": "Z2F56UZL2M1ACD",
        "websiteendpoint": "s3-website-us-west-1.amazonaws.com"
      },
      "us-west-2": {
        "S3hostedzoneID": "Z3BJ6K6RIION7M",
        "websiteendpoint": "s3-website-us-west-2.amazonaws.com"
      },
      "eu-west-1": {
        "S3hostedzoneID": "Z1BKCTXD74EZPE",
        "websiteendpoint": "s3-website-eu-west-1.amazonaws.com"
      },
      "ap-southeast-1": {
        "S3hostedzoneID": "Z3O0J2DXBE1FTB",
        "websiteendpoint": "s3-website-ap-southeast-1.amazonaws.com"
      },
      "ap-southeast-2": {
        "S3hostedzoneID": "Z1WCIGYICN2BYD",
        "websiteendpoint": "s3-website-ap-southeast-2.amazonaws.com"
      },
      "ap-northeast-1": {
        "S3hostedzoneID": "Z2M4EHUR26P7ZW",
        "websiteendpoint": "s3-website-ap-northeast-1.amazonaws.com"
      },
      "sa-east-1": {
        "S3hostedzoneID": "Z31GFT0UA1I2HV",
        "websiteendpoint": "s3-website-sa-east-1.amazonaws.com"
      }
    }
  },
  "Resources": {
    "WebPageBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "WebsiteConfiguration": {
          "ErrorDocument": "index.html",
          "IndexDocument": "index.html"
        },
        "BucketName": {
          "Ref": "Domain"
        }
      }
    },
    "PublicReadPlicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "WebPageBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": ["s3:GetObject"],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "WebPageBucket"
                    },
                    "/*"
                  ]
                ]
              },
              "Principal": "*"
            }
          ]
        }
      }
    },
    "DNS": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": "irdn.is.",
        "Comment": "Alias for s3 website",
        "Name": {
          "Ref": "Domain"
        },
        "Type": "A",
        "AliasTarget": {
          "HostedZoneId": {
            "Fn::FindInMap": [
              "RegionMap",
              {
                "Ref": "AWS::Region"
              },
              "S3hostedzoneID"
            ]
          },
          "DNSName": {
            "Fn::FindInMap": [
              "RegionMap",
              {
                "Ref": "AWS::Region"
              },
              "websiteendpoint"
            ]
          }
        }
      }
    },
    "SkyrslaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Fetch report from ksi.is",
        "Handler": "main.handler",
        "Role": {
          "Fn::GetAtt": ["ExecutionRole", "Arn"]
        },
        "MemorySize": "512",
        "Timeout": "300",
        "Code": {
          "ZipFile": "print('Not configured')"
        },
        "Runtime": "python3.6"
      }
    },
    "RuvFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Fetch ruv streams",
        "Handler": "main.handler",
        "Role": {
          "Fn::GetAtt": ["ExecutionRole", "Arn"]
        },
        "MemorySize": "512",
        "Timeout": "300",
        "Code": {
          "ZipFile": "print('Not configured')"
        },
        "Runtime": "python3.6"
      }
    },
    "ExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        },
        "Policies": [
          {
            "PolicyName": "LogStuff",
            "PolicyDocument": {
              "Statement": {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:DescribeLogStreams"
                ],
                "Resource": ["arn:aws:logs:*:*:*"]
              }
            }
          }
        ]
      }
    },
    "SkyrslaAPI": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "SkyrslaAPI",
        "Description": "Get report from ksi",
        "FailOnWarnings": true,
        "Body": {
          "swagger": "2.0",
          "info": {
            "version": "2018-05-29T16:52:17Z",
            "title": "GetPlayers"
          },
          "basePath": "/LATEST",
          "schemes": ["https"],
          "paths": {
            "/getPlayers": {
              "get": {
                "produces": ["application/json"],
                "parameters": [
                  {
                    "name": "homeTeam",
                    "in": "query",
                    "required": true,
                    "type": "string"
                  },
                  {
                    "name": "awayTeam",
                    "in": "query",
                    "required": true,
                    "type": "string"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    },
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator": "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": ["SkyrslaFunction", "Arn"]
                        },
                        "/invocations"
                      ]
                    ]
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              },
              "options": {
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    },
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      }
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "passthroughBehavior": "when_no_match",
                  "type": "mock"
                }
              }
            },
            "/getRuv": {
              "get": {
                "produces": ["application/json"],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    },
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": ["RuvFunction", "Arn"]
                        },
                        "/invocations"
                      ]
                    ]
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              },
              "options": {
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    },
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      }
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "passthroughBehavior": "when_no_match",
                  "type": "mock"
                }
              }
            }
          },
          "definitions": {
            "Empty": {
              "type": "object",
              "title": "Empty Schema"
            }
          },
          "x-amazon-apigateway-request-validators": {
            "Validate query string parameters and headers": {
              "validateRequestParameters": true,
              "validateRequestBody": false
            }
          }
        }
      }
    },
    "APIGatewayLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": ["SkyrslaFunction", "Arn"]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "SkyrslaAPI"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "APIGatewayLambdaPermissionRuv": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": ["RuvFunction", "Arn"]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "SkyrslaAPI"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["SkyrslaAPI"],
      "Properties": {
        "RestApiId": {
          "Ref": "SkyrslaAPI"
        },
        "StageName": "LATEST"
      }
    }
  },
  "Outputs": {
    "WebPageBucket": {
      "Description": "Bucket to store webpage",
      "Value": {
        "Ref": "WebPageBucket"
      }
    },
    "Domain": {
      "Description": "Domain of the webpage",
      "Value": {
        "Ref": "Domain"
      }
    },
    "SkyrslaFunctionName": {
      "Description": "Name of the lambda function to fetch match report",
      "Value": {
        "Ref": "SkyrslaFunction"
      }
    },
    "RuvFunctionName": {
      "Description": "Name of the lambda function to fetch ruv",
      "Value": {
        "Ref": "RuvFunction"
      }
    },
    "ApiGatewayUrl": {
      "Description": "Root URL of the API gateway",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "SkyrslaAPI"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/LATEST/"
          ]
        ]
      }
    }
  }
}
